// package main

// import (
//     "database/sql"
//     _ "github.com/go-sql-driver/mysql"
// 	"fmt"
// 	"time"
// )

// func main() {
//     fmt.Println("!... Hello World ...!")
// 	db, err := sql.Open("mysql", "thedanisaur:toor@/movie_sunday")
// 	if err != nil {
// 		fmt.Println(err)
// 	}
// 	defer db.Close()
// 	// See "Important settings" section.
// 	db.SetConnMaxLifetime(time.Minute * 3)
// 	db.SetMaxOpenConns(10)
// 	db.SetMaxIdleConns(10)

// 	// Open doesn't open a connection. Validate DSN data:
// 	err = db.Ping()
// 	if err != nil {
// 		panic(err.Error()) // proper error handling instead of panic in your app
// 	} else {
// 		fmt.Println("Connected")
// 	}

// 	// Execute the query
// 	rows, err := db.Query("SELECT * FROM ranking_vw")
// 	if err != nil {
// 		panic(err.Error()) // proper error handling instead of panic in your app
// 	}

// 	// Get column names
// 	columns, err := rows.Columns()
// 	if err != nil {
// 		panic(err.Error()) // proper error handling instead of panic in your app
// 	}

// 	// Make a slice for the values
// 	values := make([]sql.RawBytes, len(columns))

// 	// rows.Scan wants '[]interface{}' as an argument, so we must copy the
// 	// references into such a slice
// 	// See http://code.google.com/p/go-wiki/wiki/InterfaceSlice for details
// 	scanArgs := make([]interface{}, len(values))
// 	for i := range values {
// 		scanArgs[i] = &values[i]
// 	}

// 	// Fetch rows
// 	for rows.Next() {
// 		// get RawBytes from data
// 		err = rows.Scan(scanArgs...)
// 		if err != nil {
// 			panic(err.Error()) // proper error handling instead of panic in your app
// 		}

// 		// Now do something with the data.
// 		// Here we just print each column as a string.
// 		var value string
// 		for i, col := range values {
// 			// Here we can check if the value is nil (NULL value)
// 			if col == nil {
// 				value = "NULL"
// 			} else {
// 				value = string(col)
// 			}
// 			fmt.Println(columns[i], ": ", value)
// 		}
// 		fmt.Println("-----------------------------------")
// 	}
// 	if err = rows.Err(); err != nil {
// 		panic(err.Error()) // proper error handling instead of panic in your app
// 	}
// }