package handlers

import (
    "database/sql"
    _ "github.com/go-sql-driver/mysql"
	"encoding/json"
	"net/http"
	"fmt"
	"go_fetch/types"
	"go_fetch/db"
)

func UserRoute() string {
	return "/users"
}

func UserHandler(writer http.ResponseWriter, request *http.Request) {
	// txid := uuid.New()
	txid := types.UUID{ID: "1234567"}
	fmt.Printf("UserHandler | %s\n", txid.String())
	switch request.Method {
	case "GET":
		result := userGet()
		if result == nil {
			msg := fmt.Sprintf("%s %s failed: %s", request.Method, UserRoute(), txid.String())
			err := types.Error{Msg: msg}
			json.NewEncoder(writer).Encode(err)
		} else {
			json.NewEncoder(writer).Encode(result)
		}
	case "POST":
		result := userPost()
		// if result == nil {
		// 	msg := fmt.Sprintf("%s %s failed: %s", request.Method, UserRoute(), txid.String())
		// 	err := types.Error{Msg: msg}
		// 	json.NewEncoder(writer).Encode(err)
		// } else {
		json.NewEncoder(writer).Encode(result)
		// }
	default:
		msg := fmt.Sprintf("%s %s unavailable: %s", request.Method, UserRoute(), txid.String())
		result := types.Error{Msg: msg}
		json.NewEncoder(writer).Encode(result)
	}
}

func userGet() []types.User {
	fmt.Println("userGet")
	database := db.GetInstance()
	// Execute the query
	rows, err := database.Query("SELECT BIN_TO_UUID(person_id) person_id, person_username, person_password, person_email FROM people")
	if err != nil {
		fmt.Printf("Failed to query databse\n%s\n", err.Error())
		return nil
	}

	columns, err := rows.Columns()
	if err != nil {
		fmt.Printf("Failed to read columns\n%s\n", err.Error())
		return nil
	}

	values := make([]sql.RawBytes, len(columns))
	scanArgs := make([]interface{}, len(values))
	for i := range values {
		scanArgs[i] = &values[i]
	}

	var users []types.User
	for rows.Next() {
		err = rows.Scan(scanArgs...)
		if err != nil {
			fmt.Printf("Failed to scan row\n%s\n", err.Error())
			return nil
		}

		var id []byte
		var username string
		var password string
		var email string
		for i, col := range values {
			switch columns[i] {
			case "person_id":
				id = col
			case "person_username":
				username = string(col)
			case "person_password":
				password = string(col)
			case "person_email":
				email = string(col)
			}
		}
		users = append(users, types.User{ID: id, Username: username, Password: password, Email: email})
	}

	err = rows.Err()
	if err != nil {
		fmt.Printf("Failed after row scan\n%s\n", err.Error())
		return nil
	}

	return users
}

func userPost() types.Error {
	return types.Error{Msg: "POST"}
}